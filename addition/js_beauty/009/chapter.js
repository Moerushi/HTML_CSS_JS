let re1 =new RegExp("abc");
let re2 =/аЬс/;

console.log(/abc/.test("abcde")); // true
console.log(/abc/.test("abxde")); // false

console.log(/[0123456789]/.test("in 1992"));
// true
console.log(/[0-9]/.test("in 1992"));
// true

// \d - любая цифра;
// \w - любой алфавитно-цифровой символ (словообразующий символ);
// \s - любой пробельный символ (пробел, табуляция, новая строка и т. п.);
// \D - символ, который не является цифрой;
// \W - не алфавитно-цифровой символ;
// \S - не пробельный символ;
// , - любой символ, кроме новой строки.
// [\d.] означает любую цифру или символ точки. 

let dateTime = /\d\d-\d\d-\d\d\d\d \d\d:\d\d/;
console.log(dateTime.test("01-30-2003 15:20"));
// true
console.log(dateTime.test("30-jan-2003 15:20"));
// false

// Чтобы инвертировать набор символов, то есть сказать, что вы хотите полу­чить любой символ, кроме символов, входящих в данное множество, можно поставить после открывающей скобки символ вставки (^) .

let notBinary = /[^01]/;
console.log(notBinary.test("1100100010100110"));
// false
console.log(notBinary.test("1100100010200110"));
// true

// Если после чего-либо в регулярном выражении поставить знак плюс (+), это будет означать, что данный элемент может повторяться несколько раз. Так, /\d+/ соответствует одной или нескольким цифрам.

console.log(/'\d+'/.test("'123'"));
// true
console.log(/' \d+' /. test("' '"));
// false

// Звездочка(*) имеет аналогичное значение, но шаблон с ее использованием соответствует также нулю повторений. Если после чего-то стоит звездоч­ ка, данная часть шаблона не мешает соответствию - если не будет найден подходящий текст, то шаблон просто посчитает это нулевым количеством найденных соответствий. 

console.log(/'\d*'/.test("'123'"));
// true
console.log(/'\d*'/.test("' '"));
// true

// Вопросительный знак делает часть шаблона необязательной.

let neighbor = /neighbou?r/;
console.log(neighbor.test("neighbour"));
// true
console.log(neighbor.test("neighbor"));
// true

//Чтобы показать, что фрагмент должен встречаться точное количество раз, применяются фигурные скобки. 
// {2} - повториться 2 раза
// {2,4} - минимум 2 раза и максимум 4 раза
// {5,} - повторение 5 и более раз

let dateTimeTwo = /\d{1,2}-\d{1,2}-\d{4} \d{1,2}:\d{2}/;
console.log(dateTimeTwo.test("1-30-2003 8:45"));
// true

// Чтобы использовать операторы типа* или+ для нескольких повторений элемента, нужно задействовать скобки.

let cartoonCrying =/boo+(hoo+)+/i;
console.log(cartoonCrying.test("Boohoooohoohooo"));
// true

let match = /\d+/.ехес("один два 100"); // возвращает null, если не найдено и выражение, если найдено
console.log(match);
// ["100"]
console.log(match.index);
// 8

console.log("oдин два 100".match(/\d+/)); // метод match для строковых значений
// ["100"]